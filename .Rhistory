summary(mod1)
plot(mod1)
anova(mod1)
summary(mod1)
anova(mod1)
summary(mod1)$tTable
round(summary(mod1)$tTable, 3)
round(summary(mod1)$tTable, 4)
plot(mod1)
anova(mod1)
write.csv("./output/betaDiv_beta_lme.csv", round(summary(mod1)$tTable, 4))
?write.csv
write.csv(round(summary(mod1)$tTable, 4),
"./output/betaDiv_beta_lme.csv")
ggplot(data = lmeDat, aes(dateR, log(beta), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none")
ggplot(data = lmeDat, aes(year0Z, log(beta), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none")
ggplot(data = lmeDat, aes(dateR, log(beta), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none") + ylab("")
ggsave("./figs/betaDiv_beta.png")
ggsave("./figs/betaDiv_beta.png", width = 3.5, height = 3.5)
ggplot(data = lmeDat, aes(dateR, log(beta), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none")
ggplot(data = lmeDat, aes(dateR, log(beta), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none")
ggsave("./figs/betaDiv_beta.png", width = 5, height = 5)
hist(lmeDat$gamma)
hist(log(lmeDat$gamma + 1))
rand4 <- ~ year0Z | subSite
mod3 <- lme(fixed = log(gamma + 1) ~ 1 +
year0Z * durationZ,
data = lmeDat, method = "REML",
random = list(rand1, rand2, rand4),
correlation = corAR1())
summary(mod3)
plot(mod4)
hist(lmeDat$alpha)
hist(log(lmeDat$alpha + 1))
rand4 <- ~ year0Z | subSite
mod5 <- lme(fixed = log(alpha + 1) ~ 1 +
year0Z * durationZ,
data = lmeDat, method = "REML",
random = list(rand1, rand2, rand4),
correlation = corAR1())
summary(mod5)
plot(mod5)
ggplot(data = lmeDat, aes(dateR, log(alpha + 1), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none")
ggsave("./figs/betaDiv_alpha.png", width = 5, height = 5)
ggplot(data = lmeDat, aes(dateR, log(gamma + 1), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none")
ggsave("./figs/betaDiv_gamma.png", width = 5, height = 5)
mod3 <- lme(fixed = log(gamma + 1) ~ 1 +
year0Z * durationZ,
data = lmeDat, method = "REML",
random = list(rand1, rand2, rand4),
correlation = corAR1())
summary(mod3)
summary(mod3)$tTable
write.csv(round(summary(mod3)$tTable, 4),
"./output/betaDiv_gamma_lme.csv")
mod5 <- lme(fixed = log(alpha + 1) ~ 1 +
year0Z * durationZ,
data = lmeDat, method = "REML",
random = list(rand1, rand2, rand4),
correlation = corAR1())
summary(mod5)
write.csv(round(summary(mod5)$tTable, 4),
"./output/betaDiv_gamma_lme.csv")
mod5 <- lme(fixed = log(alpha + 1) ~ 1 +
year0Z * durationZ,
data = lmeDat, method = "REML",
random = list(rand1, rand2, rand4),
correlation = corAR1())
summary(mod5)
plot(mod5)
write.csv(round(summary(mod5)$tTable, 4),
"./output/betaDiv_alpha_lme.csv")
hist(log(lmeDat$gamma + 1))
rand4 <- ~ year0Z | subSite
mod3 <- lme(fixed = log(gamma + 1) ~ 1 +
year0Z * durationZ,
data = lmeDat, method = "REML",
random = list(rand1, rand2, rand4),
correlation = corAR1())
summary(mod3)$tTable
plot(mod3)
write.csv(round(summary(mod3)$tTable, 4),
"./output/betaDiv_gamma_lme.csv")
summary(mod5)$tTable
# Edmunds dataset
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
theme(legend.position = "none")
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE)
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = TRUE)
# Edmunds dataset
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE)
ggsave("./figs/betaDiv_beta_Edmunds.png", width = 5, height = 5)
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
ggtitle("Edmunds - corals in St. John")
# Edmunds dataset
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
ggtitle("Edmunds dataset\nCorals in St. John")
# Edmunds dataset
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
ggtitle("Edmunds dataset\nCorals in St. John, U.S. Virgin Islands")
ggsave("./figs/betaDiv_beta_Edmunds.png", width = 5, height = 5)
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
# get data for analysis
source("./R/bts_dataPrep.R")
# get additional libraries
library(tidyr)
library(ggplot2)
theme_set(theme_bw(base_size = 10))
# library(arm)
# library(AICcmodavg)
# Need to get data that has both alpha and gamma richness at a given time point
head(fullDat)
names(fullDat)
str(fullDat)
# subSiteID concatenates studySub, site, and species scale (S or R)
unique(fullDat$studySub)
unique(fullDat$subSiteID)
# I need a column that concatenates studySub and site
fullDat$subSite <- with(fullDat, paste(studySub, site, sep = "_"))
unique(fullDat$subSite)
with(fullDat, table(subSite, Scale))
# Now I need to summarize by subSite
crap <- fullDat %>% group_by(subSite, Scale) %>% summarise(reps = n())
crap2 <- spread(crap, key = Scale, value = reps)
crap3 <- na.omit(crap2)
head(crap3)
# Now use an inner_join to select only those subSites that have alpha and gamma
dat <- inner_join(fullDat, crap3)
head(dat)
dat2 <- dat %>% select(subSite, dateR, Scale, rich, durationZ, year0, year0Z) %>%
spread(key = Scale, value = rich)
head(dat2)
dat2$beta <- with(dat2, gamma/alpha)
dat2$dateR <- as.Date(dat2$dateR)
unique(dat2$subSite)
# combine with other factors
names(fullDat)
# use distinct to get unique rows
studies <- fullDat %>% select(site, studySub, studyName, subSite,
Prediction, Trophic, duration) %>% distinct()
head(studies)
unique(studies$subSite)
# Now join
dat3 <- inner_join(dat2, studies)
head(dat3)
# how many studies, subStudies, subSites?
countVector <- with(dat3, c(length(unique(studyName)), length(unique(studySub)),
length(unique(subSite))))
countDF <- data.frame(category = c("Study", "SubStudy", "SubSite"), n = countVector)
write.csv(countDF, "./output/betaDiv_dataset.csv")
### RENAME
lmeDat <- dat3
# quick plot
ggplot(data = lmeDat, aes(dateR, log(beta), color = subSite)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
# facet_wrap(~ studySub, scales = "free_x") +
theme(legend.position = "none")
ggsave("./figs/betaDiv_beta.png", width = 5, height = 5)
# Edmunds dataset
ggplot(data = subset(lmeDat, studyName == "Edmunds"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
ggtitle("Edmunds dataset\nCorals in St. John, U.S. Virgin Islands")
ggsave("./figs/betaDiv_beta_Edmunds.png", width = 5, height = 5)
### LME
library(nlme)
# make sure the data are ordered by time within time-series
# necessary for autocorrelation
head(lmeDat$dateR)
tail(lmeDat$dateR)
############################################################
############################################################
###HIERARCHICAL MIXED EFFECTS MODELS: BETA DIVERSITY
############################################################
############################################################
summary(lmeDat)
# Not enough data to use any of the categorical predictors,
# but can use duration as a predictor
############################################
# First analysis
# Year was centered
# Duration was centered
summary(lmeDat)
# Random effects for LME models
rand1 <- ~1 | studyName
rand2 <- ~1 | studySub
rand3 <- ~1 | subSite
rand4 <- ~ year0Z | subSite
mod1 <- lme(fixed = log(beta) ~ 1 +
year0Z * durationZ,
data = lmeDat, method = "REML",
random = list(rand1, rand2, rand4),
correlation = corAR1())
round(summary(mod1)$tTable, 4)
plot(mod1)
write.csv(round(summary(mod1)$tTable, 4),
"./output/betaDiv_beta_lme.csv")
ggplot(data = subset(lmeDat, studyName == "SBC"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ subSite)
# SBC dataset
ggplot(data = subset(lmeDat, studyName == "SBC"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ subStudy)
# SBC dataset
ggplot(data = subset(lmeDat, studyName == "SBC"),
aes(dateR, log(beta), color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ studySub)
unique(lmeDat$studySub)
ggplot(data = subset(lmeDat, studyName == "SBC"),
aes(dateR, beta, color = site)) +
geom_point() + geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ studySub)
rm(list=ls(all=TRUE))
library(dplyr)
library(rgdal)
library(ggplot2)
#library(maptools)
# Load data table of impact scores from Ginger Allington
siteList <- read.csv("./data/elahi_extractedVals.csv")
unique(siteList$studyName)
setwd("~elahi/github/marBiodivChange_impacts/")
siteList <- read.csv("./data/elahi_extractedVals.csv")
siteList <- read.csv("./data/elahi_extractedVals.csv")
unique(siteList$studyName)
# Need to remove large-scale studies that were not used in the CB analysis
sl2 <- siteList[siteList$studyName != "Keller" &
siteList$studyName != "Bebars" &
siteList$studyName != "Greenwood" &
siteList$studyName != "Sonnewald" &
siteList$studyName != "SwedFishTrawl"  , ]
unique(sl2$studyName)
# Categorize impact score or not, rename and select columns
sl2$impact <- with(sl2, ifelse(Impact.Score == -9999, "no", "yes"))
head(sl2)
sl3 <- sl2 %>% rename(Long = Long_, impactScore = Impact.Score,
originalID = OBJECTID..) %>%
dplyr::select(originalID, studyName, Lat, Long, impactScore, impact)
head(sl3)
nudged <- readOGR(dsn = "./data/sites_nudged.kml",
layer = "sites_nudged")
library(dplyr)
library(rgdal)
library(ggplot2)
install.packages("rgdal")
nudged <- readOGR(dsn = "./data/sites_nudged.kml",
layer = "sites_nudged")
library(rgdal)
nudged <- readOGR(dsn = "./data/sites_nudged.kml",
layer = "sites_nudged")
summary(nudged)
nudged
nudgedDF <- as.data.frame(nudged)
nudgedDF
# Rename to match original dataframe
nudgedDF2 <- nudgedDF %>% rename(originalID = Description,
nudgedLong = coords.x1,
nudgedLat = coords.x2)
nudgedDF2
glimpse(sl3)
glimpse(sl3)
sl3$originalID <- as.factor(sl3$originalID)
glimpse(nudgedDF2)
# Filter out sites with impact scores to figure out which I am missing from the
# nudged dataset
sl4 <- sl3 %>% filter(impact == "no") %>%
full_join(nudgedDF2, by = "originalID")
write.csv(sl4, './output/sl4.csv')
library(raster)
imp_map_b1 <- raster("../bigFiles/model_class_wgs84_lzw.tif", band = 1)
imp_map_b2 <- raster("../bigFiles/model_class_wgs84_lzw.tif", band = 2)
imp_map_b3 <- raster("../bigFiles/model_class_wgs84_lzw.tif", band = 3)
# We can subsequently combine these into a stack which allows us to plot using
# the RGB colour scheme.
imp_stack <- stack(imp_map_b1, imp_map_b2, imp_map_b3)
plotRGB(imp_stack)
imp_stack
# Check the projection just to be sure it's WGS84
projection(imp_stack)
# Test coordinates, with impact level eye-balled off the halpern map and points
# taken off google maps.
# I do not assign a projection because they are coming from google, which uses
# the WGS84 (EPSG: 4326) CRS.
imp_level <- c('very low', 'low', 'medium', 'very high', 'land', 'sf_land', 'sf_bay')
lat <- c(-74.903173,  -6.680232,  18.728598, 58.438787, 45.213004, 37.22158,  38.065723)
long <- c(-45.068090, -105.823552, -110.122704, -0.357954, -116.556702, -122.202644, -122.392813)
test_vals <- data.frame("imp_level" = imp_level, "lat" = lat, "long" = long)
test_vals
# Convert test_vals into a spatial object
# The assignments specifies which columns have your c(lat, long)
coordinates(test_vals) <- c(3, 2)
projection(test_vals) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
impl <- extract(imp_stack, test_vals, buffer = 2000, small = T)
impl
# Plot the raster stack with the test values. Use plotRGB to plot the rgb
# defined colours stored in the different bands.
plotRGB(imp_stack)
plotRGB(imp_stack, colNA = 'black')
points(test_vals)
#######################################################################
# Convert sl4 into a spatial object
# The assignment specifies which columns have your c(long, lat)
head(sl4)
names(sl4)
# rename file
pointsObject <- sl4
head(pointsObject)
coordinates(pointsObject) <- c("nudgedLong", "nudgedLat")
pointsObject
# set projection reference
projection(pointsObject) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
projection(pointsObject) <- "+proj=longlat +datum=WGS84 +no_defs
+ellps=WGS84 +towgs84=0,0,0"
imp_map <- raster("../bigFiles/nceas_wgs.tif")
# Check the projection just to be sure it's WGS84
projection(imp_map)
nudgedImpacts1 <- extract(imp_map, pointsObject)
nudgedImpacts1
summary(nudgedImpacts1)
# still 41 out of 62 NA
nudgedImpacts2 <- extract(imp_map, pointsObject, method = "bilinear")
nudgedImpacts2
qplot(nudgedImpacts1, nudgedImpacts2) +
geom_abline(a = 0, b = 1)
nudgedImpacts3 <- extract(imp_map, pointsObject, buffer = 3000,
fun = mean, na.rm = TRUE)
nudgedImpacts3
summary(nudgedImpacts3)
qplot(nudgedImpacts1, nudgedImpacts3) +
geom_abline(a = 0, b = 1)
# Plot the raster with the sites
plot(imp_map)
# plot(imp_map, colNA = 'black')
points(pointsObject, pch = 17, col = "black")
head(sl3)
# rename file
pointsObject <- sl3
head(pointsObject)
# set coordinates - c(x, y) i.e.,  c(long, lat)
coordinates(pointsObject) <- c("Long", "Lat")
pointsObject
# set projection reference
projection(pointsObject) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
impactsOriginal <- extract(imp_map, pointsObject)
impactsOriginal
# These scores should be the same...but they are not
qplot(sl3$impactScore, impactsOriginal) +
scale_x_continuous(limits = c(0, 50)) +
geom_abline(a = 0, b = 1)
# Plot the raster with the sites
plot(imp_map)
# plot(imp_map, colNA = 'black')
points(pointsObject, pch = 17, col = "black")
head(sl3)
head(sl3)
rm(list=ls(all=TRUE))
setwd("~elahi/github/marBiodivChange_impacts/")
siteList <- read.csv("./data/elahi_extractedVals.csv")
unique(siteList$studyName)
# Need to remove large-scale studies that were not used in the CB analysis
sl2 <- siteList[siteList$studyName != "Keller" &
siteList$studyName != "Bebars" &
siteList$studyName != "Greenwood" &
siteList$studyName != "Sonnewald" &
siteList$studyName != "SwedFishTrawl"  , ]
unique(sl2$studyName)
# Categorize impact score or not, rename and select columns
sl2$impact <- with(sl2, ifelse(Impact.Score == -9999, "no", "yes"))
head(sl2)
sl3 <- sl2 %>% rename(Long = Long_, impactScore = Impact.Score,
originalID = OBJECTID..) %>%
dplyr::select(originalID, studyName, Lat, Long, impactScore, impact)
head(sl3)
head(sl3)
pointsObject <- sl3
head(pointsObject)
coordinates(pointsObject) <- c("Long", "Lat")
pointsObject
?coordinates
# set projection reference
projection(pointsObject) <-
"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
impactsOriginal <- extract(imp_map, pointsObject)
impactsOriginal
imp_map <- raster("../bigFiles/nceas_wgs.tif")
plot(imp_map)
impactsOriginal <- extract(imp_map, pointsObject)
impactsOriginal
qplot(sl3$impactScore, impactsOriginal) +
scale_x_continuous(limits = c(0, 50)) +
geom_abline(a = 0, b = 1)
coordinates(pointsObject) <- c("Lat", "Long")
pointsObject
# set projection reference
projection(pointsObject) <-
"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# Use the same map that Ginger used.
imp_map <- raster("../bigFiles/nceas_wgs.tif")
plot(imp_map)
impactsOriginal <- extract(imp_map, pointsObject)
impactsOriginal
# These scores should be the same...but they are not
qplot(sl3$impactScore, impactsOriginal) +
scale_x_continuous(limits = c(0, 50)) +
geom_abline(a = 0, b = 1)
head(sl3)
coordinates(pointsObject) <- c("Long", "Lat")
pointsObject
head(pointsObject)
str(pointsObject)
imp_map2 <- raster("../bigFiles/model_class_wgs84_lzw.tif")
plot(imp_map2)
qplot(sl3$impactScore, impactsRE) +
scale_x_continuous(limits = c(0, 50)) +
geom_abline(a = 0, b = 1)
impactsRE <- extract(imp_map, pointsObject)
impactsRE
summary(impactsRE)
summary(sl3)
with(sl3, table(impact))
plot(imp_map)
# plot(imp_map, colNA = 'black')
points(pointsObject, pch = 17, col = "black")
plot(imp_map, colNA = 'black')
plot(imp_map)
points(pointsObject, pch = 17, col = "black")
?plot
pdf("./figs/robinsPlot.pdf")
plot(imp_map)
points(pointsObject, pch = 17, col = "black")
dev.off()
impactsRE
hist(impactsRE)
?hist
qplot(impactsRE) + geom_histogram
qplot(impactsRE)
qplot(sl3$impactScore)
qplot(impactsRE)
head(sl3)
sl4 <- sl3 %>% filter(impact == "yes")
summary(sl4)
pointsObject <- sl4
head(pointsObject)
# set spatial coordinates to create a spatial object
# c(x, y) i.e.,  c(long, lat)
coordinates(pointsObject) <- c("Long", "Lat")
pointsObject
head(pointsObject)
str(pointsObject)
# set projection reference
projection(pointsObject) <-
"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# Use the same map that Ginger used.
imp_map <- raster("../bigFiles/nceas_wgs.tif")
plot(imp_map)
impactsRE <- extract(imp_map, pointsObject)
impactsRE
summary(impactsRE) # 62 NAs - this matches Ginger's results
qplot(sl4$impactScore, impactsRE)
qplot(sl4$impactScore, impactsRE) +
geom_abline(a = 0, b = 1)
qplot(impactsRE)
qplot(sl4$impactScore)
qplot(impactsRE)
qplot(sl4$impactScore)
plot(imp_map)
# plot(imp_map, colNA = 'black')
points(pointsObject, pch = 17, col = "black")
pdf("./figs/robinsPlot.pdf")
plot(imp_map)
points(pointsObject, pch = 17, col = "black")
dev.off()
qplot(sl4$impactScore, impactsRE) +
geom_abline(a = 0, b = 1)
